from PythonJoernTests import *
from py2neo import Node

class AssignmentTests(PythonJoernTests):

    def testLVal(self):
        """Searches for all assignments in the file
        AgaviArrayPathDefinition.class.php and returns their left side."""
        query = """g.V().getAstOfFile("AgaviArrayPathDefinition.class.php").match{ isAssignment(it) }
                   .lval()"""
        result = self.j.runGremlinQuery(query)
        expect = [Node(childnum=0,funcid=14044,id=14059,lineno=353,type="AST_VAR"),
                  Node(childnum=0,funcid=13925,id=13940,lineno=313,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13696,lineno=236,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13692,lineno=235,type="AST_VAR"),
                  Node(childnum=0,funcid=13485,id=13657,lineno=216,type="AST_VAR"),
                  Node(childnum=0,funcid=13485,id=13512,lineno=202,type="AST_VAR"),
                  Node(childnum=0,funcid=13485,id=13502,lineno=200,type="AST_VAR"),
                  Node(childnum=0,funcid=13329,id=13358,lineno=168,type="AST_VAR"),
                  Node(childnum=0,funcid=13329,id=13348,lineno=166,type="AST_VAR"),
                  Node(childnum=0,funcid=13177,id=13200,lineno=133,type="AST_VAR"),
                  Node(childnum=0,funcid=13177,id=13190,lineno=131,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13168,lineno=113,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=12980,lineno=91,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=12975,lineno=89,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=12965,lineno=87,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13014,lineno=94,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13006,lineno=93,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=12991,lineno=92,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13756,lineno=244,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13752,lineno=243,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13742,lineno=241,type="AST_DIM"),
                  Node(childnum=0,funcid=13662,id=13708,lineno=237,type="AST_VAR"),
                  Node(childnum=0,funcid=12893,id=12927,lineno=63,type="AST_VAR"),
                  Node(childnum=0,funcid=12893,id=12917,lineno=62,type="AST_VAR"),
                  Node(childnum=0,funcid=14044,id=14147,lineno=370,type="AST_DIM"),
                  Node(childnum=0,funcid=14044,id=14132,lineno=368,type="AST_VAR"),
                  Node(childnum=0,funcid=14044,id=14111,lineno=364,type="AST_VAR"),
                  Node(childnum=0,funcid=13925,id=14034,lineno=330,type="AST_DIM"),
                  Node(childnum=0,funcid=13925,id=14013,lineno=328,type="AST_VAR"),
                  Node(childnum=0,funcid=13925,id=13992,lineno=324,type="AST_VAR"),
                  Node(childnum=0,funcid=13485,id=13649,lineno=212,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13896,lineno=288,type="AST_DIM"),
                  Node(childnum=0,funcid=14044,id=14103,lineno=361,type="AST_VAR"),
                  Node(childnum=0,funcid=14044,id=14091,lineno=359,type="AST_VAR"),
                  Node(childnum=0,funcid=13925,id=13984,lineno=321,type="AST_VAR"),
                  Node(childnum=0,funcid=13925,id=13972,lineno=319,type="AST_VAR"),
                  Node(childnum=0,funcid=13485,id=13642,lineno=210,type="AST_DIM"),
                  Node(childnum=0,funcid=13485,id=13591,lineno=207,type="AST_VAR"),
                  Node(childnum=0,funcid=13329,id=13468,lineno=176,type="AST_VAR"),
                  Node(childnum=0,funcid=13329,id=13437,lineno=173,type="AST_VAR"),
                  Node(childnum=0,funcid=13177,id=13310,lineno=141,type="AST_VAR"),
                  Node(childnum=0,funcid=13177,id=13279,lineno=138,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13159,lineno=108,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13091,lineno=97,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13148,lineno=105,type="AST_VAR"),
                  Node(childnum=0,funcid=12952,id=13127,lineno=101,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13874,lineno=279,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13858,lineno=272,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13832,lineno=266,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13815,lineno=258,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13796,lineno=254,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13792,lineno=253,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13785,lineno=252,type="AST_DIM"),
                  Node(childnum=0,funcid=13662,id=13854,lineno=270,type="AST_VAR"),
                  Node(childnum=0,funcid=13662,id=13847,lineno=269,type="AST_DIM")
        ]
        self.assertEquals(result, expect)

    def testRVal(self):
        """Searches for all assignments in the file
        AgaviArrayPathDefinition.class.php and returns their right side."""
        query = """g.V().getAstOfFile("AgaviArrayPathDefinition.class.php").match{ isAssignment(it) }
                   .rval()"""
        result = self.j.runGremlinQuery(query)
        expect = [Node(childnum=1,funcid=14044,id=14061,lineno=353,type="AST_ARRAY"),
                  Node(childnum=1,funcid=13925,id=13942,lineno=313,type="AST_ARRAY"),
                  Node(childnum=1,flags=["BINARY_IS_NOT_EQUAL"],funcid=13662,id=13698,lineno=236,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=13662,id=13694,lineno=235,type="AST_ARRAY"),
                  Node(childnum=1,funcid=13485,id=13659,lineno=216,type="AST_VAR"),
                  Node(childnum=1,funcid=13485,id=13514,lineno=202,type="AST_VAR"),
                  Node(childnum=1,funcid=13485,id=13504,lineno=200,type="AST_STATIC_CALL"),
                  Node(childnum=1,funcid=13329,id=13360,lineno=168,type="AST_VAR"),
                  Node(childnum=1,funcid=13329,id=13350,lineno=166,type="AST_STATIC_CALL"),
                  Node(childnum=1,funcid=13177,id=13202,lineno=133,type="AST_VAR"),
                  Node(childnum=1,funcid=13177,id=13192,lineno=131,type="AST_STATIC_CALL"),
                  Node(childnum=1,funcid=12952,id=13170,lineno=113,type="AST_CONST"),
                  Node(childnum=1,funcid=12952,id=12982,lineno=91,type="AST_CALL"),
                  Node(childnum=1,funcid=12952,id=12977,lineno=89,type="AST_VAR"),
                  Node(childnum=1,funcid=12952,id=12967,lineno=87,type="AST_STATIC_CALL"),
                  Node(childnum=1,flags=["BINARY_IS_EQUAL"],funcid=12952,id=13016,lineno=94,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=12952,id=13008,lineno=93,type="AST_DIM"),
                  Node(childnum=1,code="0",funcid=12952,id=12993,lineno=92,type="integer"),
                  Node(childnum=1,funcid=13662,id=13758,lineno=244,type="string"),
                  Node(childnum=1,code="0",funcid=13662,id=13754,lineno=243,type="integer"),
                  Node(childnum=1,funcid=13662,id=13746,lineno=241,type="AST_VAR"),
                  Node(childnum=1,funcid=13662,id=13710,lineno=237,type="AST_CALL"),
                  Node(childnum=1,funcid=12893,id=12929,lineno=63,type="AST_DIM"),
                  Node(childnum=1,funcid=12893,id=12919,lineno=62,type="AST_STATIC_CALL"),
                  Node(childnum=1,funcid=14044,id=14152,lineno=370,type="AST_VAR"),
                  Node(childnum=1,funcid=14044,id=14134,lineno=368,type="AST_STATIC_CALL"),
                  Node(childnum=1,flags=["BINARY_CONCAT"],funcid=14044,id=14113,lineno=364,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=13925,id=14038,lineno=330,type="AST_VAR"),
                  Node(childnum=1,funcid=13925,id=14015,lineno=328,type="AST_CALL"),
                  Node(childnum=1,flags=["BINARY_CONCAT"],funcid=13925,id=13994,lineno=324,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=13485,id=13651,lineno=212,type="AST_DIM"),
                  Node(childnum=1,funcid=13662,id=13900,lineno=288,type="AST_VAR"),
                  Node(childnum=1,funcid=14044,id=14105,lineno=361,type="AST_VAR"),
                  Node(childnum=1,flags=["BINARY_CONCAT"],funcid=14044,id=14093,lineno=359,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=13925,id=13986,lineno=321,type="AST_VAR"),
                  Node(childnum=1,flags=["BINARY_CONCAT"],funcid=13925,id=13974,lineno=319,type="AST_BINARY_OP"),
                  Node(childnum=1,funcid=13485,id=13647,lineno=210,type="AST_ARRAY"),
                  Node(childnum=1,flags=["TYPE_LONG"],funcid=13485,id=13593,lineno=207,type="AST_CAST"),
                  Node(childnum=1,funcid=13329,id=13470,lineno=176,type="AST_DIM"),
                  Node(childnum=1,flags=["TYPE_LONG"],funcid=13329,id=13439,lineno=173,type="AST_CAST"),
                  Node(childnum=1,funcid=13177,id=13312,lineno=141,type="AST_DIM"),
                  Node(childnum=1,flags=["TYPE_LONG"],funcid=13177,id=13281,lineno=138,type="AST_CAST"),
                  Node(childnum=1,funcid=12952,id=13161,lineno=108,type="AST_CONST"),
                  Node(childnum=1,flags=["TYPE_LONG"],funcid=12952,id=13093,lineno=97,type="AST_CAST"),
                  Node(childnum=1,funcid=12952,id=13150,lineno=105,type="AST_DIM"),
                  Node(childnum=1,funcid=12952,id=13129,lineno=101,type="AST_DIM"),
                  Node(childnum=1,code="2",funcid=13662,id=13876,lineno=279,type="integer"),
                  Node(childnum=1,code="2",funcid=13662,id=13860,lineno=272,type="integer"),
                  Node(childnum=1,funcid=13662,id=13834,lineno=266,type="AST_VAR"),
                  Node(childnum=1,funcid=13662,id=13817,lineno=258,type="AST_VAR"),
                  Node(childnum=1,code="1",funcid=13662,id=13798,lineno=254,type="integer"),
                  Node(childnum=1,funcid=13662,id=13794,lineno=253,type="string"),
                  Node(childnum=1,funcid=13662,id=13789,lineno=252,type="AST_VAR"),
                  Node(childnum=1,funcid=13662,id=13856,lineno=270,type="string"),
                  Node(childnum=1,funcid=13662,id=13851,lineno=269,type="AST_VAR")
        ]
        self.assertEquals(result, expect)
